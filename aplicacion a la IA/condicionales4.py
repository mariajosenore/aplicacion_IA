"""
Ejercicio 2: Clasificador de Tri√°ngulos
Objetivo: Determinar el tipo de tri√°ngulo basado en las longitudes de sus lados
"""

print("=== CLASIFICADOR DE TRI√ÅNGULOS ===")

# Funci√≥n para validar entrada num√©rica positiva
def obtener_lado(numero):
    while True:
        try:
            lado = float(input(f"Ingrese la longitud del lado {numero}: "))
            if lado > 0:
                return lado
            else:
                print("La longitud debe ser un n√∫mero positivo")
        except ValueError:
            print("Debe ingresar un n√∫mero v√°lido")

# Obtener las longitudes de los lados
print("Ingrese las longitudes de los tres lados del tri√°ngulo:")
lado_a = obtener_lado(1)
lado_b = obtener_lado(2)
lado_c = obtener_lado(3)

print(f"\nLados ingresados: {lado_a}, {lado_b}, {lado_c}")

# Verificar si forman un tri√°ngulo v√°lido (desigualdad triangular)
if (lado_a + lado_b > lado_c) and (lado_a + lado_c > lado_b) and (lado_b + lado_c > lado_a):
    print("‚úì Las longitudes forman un tri√°ngulo v√°lido")

    # Clasificar por lados (equil√°tero, is√≥sceles, escaleno)
    if lado_a == lado_b == lado_c:
        tipo_lados = "Equil√°tero"
        descripcion_lados = "Todos los lados son iguales"
    elif lado_a == lado_b or lado_a == lado_c or lado_b == lado_c:
        tipo_lados = "Is√≥sceles"
        descripcion_lados = "Dos lados son iguales"
    else:
        tipo_lados = "Escaleno"
        descripcion_lados = "Todos los lados son diferentes"

    # Clasificar por √°ngulos (usando teorema de Pit√°goras)
    # Ordenar los lados para facilitar el c√°lculo
    lados = sorted([lado_a, lado_b, lado_c])
    lado_menor, lado_medio, lado_mayor = lados

    # Calcular el cuadrado de los lados
    cuadrado_menor = lado_menor ** 2
    cuadrado_medio = lado_medio ** 2
    cuadrado_mayor = lado_mayor ** 2

    # Clasificar por √°ngulos
    if abs(cuadrado_menor + cuadrado_medio - cuadrado_mayor) < 0.0001:  # margen de error flotante
        tipo_angulos = "Rect√°ngulo"
        descripcion_angulos = "Tiene un √°ngulo de 90 grados"
    elif cuadrado_menor + cuadrado_medio > cuadrado_mayor:
        tipo_angulos = "Acut√°ngulo"
        descripcion_angulos = "Todos los √°ngulos son menores a 90 grados"
    else:
        tipo_angulos = "Obtus√°ngulo"
        descripcion_angulos = "Tiene un √°ngulo mayor a 90 grados"

    # Calcular per√≠metro y √°rea (f√≥rmula de Her√≥n)
    perimetro = lado_a + lado_b + lado_c
    s = perimetro / 2  # Semi-per√≠metro
    area = (s * (s - lado_a) * (s - lado_b) * (s - lado_c)) ** 0.5

    # Mostrar resultados
    print(f"\n=== CLASIFICACI√ìN DEL TRI√ÅNGULO ===")
    print(f"Por lados: {tipo_lados}")
    print(f" ‚Üí {descripcion_lados}")
    print(f"Por √°ngulos: {tipo_angulos}")
    print(f" ‚Üí {descripcion_angulos}")

    print(f"\n=== PROPIEDADES ===")
    print(f"Per√≠metro: {perimetro:.2f} unidades")
    print(f"√Årea: {area:.2f} unidades cuadradas")

    # Informaci√≥n adicional seg√∫n el tipo
    if tipo_lados == "Equil√°tero":
        print(f"\nüìê Informaci√≥n adicional:")
        print(f" ‚Ä¢ Todos los √°ngulos miden 60¬∞")
        print(f" ‚Ä¢ Es tambi√©n un tri√°ngulo acut√°ngulo")
        print(f" ‚Ä¢ Altura: {(lado_a * (3**0.5)) / 2:.2f} unidades")

    elif tipo_angulos == "Rect√°ngulo":
        print(f"\nüìê Informaci√≥n adicional:")
        print(f" ‚Ä¢ La hipotenusa mide {lado_mayor:.2f} unidades")
        print(f" ‚Ä¢ Los catetos miden {lado_menor:.2f} y {lado_medio:.2f} unidades")
        print(f" ‚Ä¢ √Årea tambi√©n = (cateto1 √ó cateto2) / 2 = {(lado_menor * lado_medio) / 2:.2f}")

else:
    print("‚ùå Las longitudes NO forman un tri√°ngulo v√°lido")
    print("Recuerda: La suma de dos lados debe ser mayor que el tercer lado")

    # Mostrar qu√© condici√≥n falla
    if lado_a + lado_b <= lado_c:
        print(f" ‚Ä¢ {lado_a} + {lado_b} = {lado_a + lado_b} ‚â§ {lado_c}")
    if lado_a + lado_c <= lado_b:
        print(f" ‚Ä¢ {lado_a} + {lado_c} = {lado_a + lado_c} ‚â§ {lado_b}")
    if lado_b + lado_c <= lado_a:
        print(f" ‚Ä¢ {lado_b} + {lado_c} = {lado_b + lado_c} ‚â§ {lado_a}")
